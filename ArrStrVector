#include <iostream>
#include <string>
#include <vector>
using namespace std;

// Function to find the largest element in an array
int largest(vector<int> &arr, int n)
{
    int max = arr[0];
    for (int i = 1; i < n; i++)
    {
        if (arr[i] > max)
        {
            max = arr[i];
        }
    }
    return max;
}

// Check if an Array is Sorted
bool check(vector<int> &nums)
{
    int n = nums.size();
    for (int i = 1; i < n; i++)
    {
        if (nums[i - 1] > nums[i])
        {
            return false;
        }
    }
    return true;
}

// 344 Reverse string
// Input: s = ["h","e","l","l","o"]
// Output: ["o","l","l","e","h"]

// word count
// int countWords(string s)
// {
//     // code here
//     if (s == null || s.isEmpty())
//     {
//         return 0;
//     }
//     String[] words = s.split("\\s+");
//     return words.length;
// }

void getLength(char name[])
{
    int c = 0;
    for (int i = 0; name[i] != '\0'; i++)
    {
        c++;
    }
    cout << c << endl;
}

// Reverse char array
void ReverseCharArray(vector<char> &s)
{
    int left = 0;
    int right = s.size() - 1;

    for (char i = left, j = right; i < j; i++, j--)
    {
        int temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }
    for (int i = 0; i < s.size(); i++)
    {
        cout << s[i] << " ";
    }
    cout << endl;
}

// string reverseString(const string &str) {
//     string reversedStr = str;
//     int n = reversedStr.length();
//     for (int i = 0; i < n / 2; i++) {
//         swap(reversedStr[i], reversedStr[n - i - 1]);
//     }
//     return reversedStr;
// }

// reverse String
void ReverseString(string s)
{
    int left = 0;
    int right = s.size() - 1;

    for (char i = left, j = right; i < j; i++, j--)
    {
        int temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }
    for (int i = 0; i < s.size(); i++)
    {
        cout << s[i] << " ";
    }
    cout << endl;
}

// revres String Checking palindrome
void ReverseStringPalindrome(string s)
{
    string ts = s;
    cout << s << endl;
    cout << ts << endl;
    int left = 0;
    int right = s.size() - 1;

    for (char i = left, j = right; i < j; i++, j--)
    {
        int temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }
    if (s == ts)
    {
        cout << "It is a palindrome." << endl;
    }
    else
    {
        cout << "It is not a palindrome." << endl;
    }
}

// Count Word
// I am jatin
void countWord(string s3)
{
    int left = 0, c = 0;
    int right = s3.size() - 1;
    for (int i = left; i < right; i++)
    {
        if (s3[i] == ' ')
        {
            c++;
        }
    }
    cout << c;
}

// 3. Find the First Non-Repeating Character
int firstUniqChar(const string &str)
{
    vector<int> count(256, 0);
    for (char c : str)
        count[c]++;
    for (int i = 0; i < str.length(); i++)
        if (count[str[i]] == 1)
            return i;
    return -1;
}

// 4. Longest Common Prefix
string longestCommonPrefix(const vector<string> &strs)
{
    if (strs.empty())
        return "";
    string prefix = strs[0];
    for (int i = 1; i < strs.size(); i++)
    {
        while (strs[i].find(prefix) != 0)
            prefix = prefix.substr(0, prefix.length() - 1);
        if (prefix.empty())
            return "";
    }
    return prefix;
}

// 5. Anagram Check
bool isAnagram(const string &s1, const string &s2)
{
    if (s1.length() != s2.length())
        return false;
    vector<int> count(256, 0);
    for (int i = 0; i < s1.length(); i++)
    {
        count[s1[i]]++;
        count[s2[i]]--;
    }
    for (int i : count)
        if (i != 0)
            return false;
    return true;
}

// // 6. String to Integer (atoi)
// int myAtoi(const string &str)
// {
//     int i = 0, sign = 1, result = 0;
//     while (i < str.length() && str[i] == ' ')
//         i++;
//     if (i < str.length() && (str[i] == '+' || str[i] == '-'))
//         sign = (str[i++] == '-') ? -1 : 1;
//     while (i < str.length() && isdigit(str[i]))
//     {
//         if (result > INT_MAX / 10 || (result == INT_MAX / 10 && str[i] - '0' > 7))
//             return (sign == 1) ? INT_MAX : INT_MIN;
//         result = result * 10 + (str[i++] - '0');
//     }
//     return result * sign;
// }

// // 7. Longest Substring Without Repeating Characters
// int lengthOfLongestSubstring(const string &str)
// {
//     vector<int> index(256, -1);
//     int maxLength = 0, start = 0;
//     for (int i = 0; i < str.length(); i++)
//     {
//         if (index[str[i]] >= start)
//             start = index[str[i]] + 1;
//         index[str[i]] = i;
//         maxLength = max(maxLength, i - start + 1);
//     }
//     return maxLength;
// }

// Max Consecutive ones
int findMaxConsecutiveOnes(vector<int> &nums)
{
    int n = nums.size();
    int c = 0, maxi = 0;
    for (int i = 0; i < n; i++)
    {
        if (nums[i] == 1)
        {
            c++;
            // cout << c << " ";
            maxi = max(maxi, c);
        }
        else
        {
            c = 0;
        }
    }
    cout << "Max is " << maxi << "." << endl;
};

// Single Number
// 1,2,1,2,3 -> return 3;
int singleNumber(vector<int> &nums)
{
    int ans = 0;
    int n = nums.size();

    for (int i = 0; i < n; i++)
    {
        ans = nums[i] ^ ans;
    }
    return ans;
}

// Moves Zeroes to end
void moveZeroes(vector<int> &nums)
{
    int j = 0;
    int n = nums.size();

    // Move all non-zero elements to the front of the array
    for (int i = 0; i < n; i++)
    {
        if (nums[i] != 0)
        {
            nums[j++] = nums[i];
        }
    }

    // Fill the rest of the array with zeros
    while (j < n)
    {
        nums[j++] = 0;
    }
    for (int i = 0; i < nums.size(); i++)
    {
        cout << nums[i] << " ";
    }
}

//
string reverseNumberString(string num)
{
    bool isNegative = (num[0] == '-'); // Check if the number is negative
    int start = isNegative ? 1 : 0;    // Start index to avoid reversing the negative sign

    string reversedNum = ""; // Resultant reversed number string

    for (int i = num.length() - 1; i >= start; i--)
    {
        if (num[i] != '0' || !reversedNum.empty())
        {
            reversedNum += num[i];
        }
    }

    if (reversedNum.empty())
    {
        reversedNum = "0"; // If all digits were zero, return "0"
    }

    if (isNegative)
    {
        reversedNum = "-" + reversedNum; // Add back the negative sign if needed
    }

    return reversedNum;
}

// Sum of all SubArray
void SumSubArray(vector<int> &a)
{

    int n = a.size();
    int c = 0, sum = 0;
    for (int i = 0; i < n; i++)
    {
        c = 0;
        for (int j = i; j < n; j++)
        {
            c = c + a[j];
            cout << "Sum :" << c << endl;
        }
    }
};

// Longest Arithmetic SubArray - KickStart (DP Problem)
void LongestArithmeticSubArray(vector<int> &a)
{

    int n = a.size();
    int j = 2;
    int ans = 2;         // Length of the longest arithmetic subarray found
    int d = a[1] - a[0]; // Common difference of the current arithmetic subarray
    int curr = 2;        // Length of the current arithmetic subarray

    while (j < n)
    {
        if (a[j] - a[j - 1] == d)
        {
            // Current element continues the arithmetic subarray
            curr++;
        }
        else
        {
            // Current element starts a new arithmetic subarray
            d = a[j] - a[j - 1];
            curr = 2;
        }
        ans = max(ans, curr); // Update the length of the longest arithmetic subarray found
        j++;
    }

    cout << ans << endl;
};

/*

Let's say we have the array: a[] = {10, 7, 4, 6, 8, 10, 11}

Initial Setup:
n = 7
d = a[1] - a[0] = 7 - 10 = -3
ans = 2
curr = 2
Iteration through the array:
j = 2:

a[2] = 4, a[1] = 7
a[2] - a[1] = 4 - 7 = -3
-3 == -3, so curr++ (now curr = 3)
ans = max(2, 3) = 3
At this point, the longest arithmetic subarray is [10, 7, 4].

j = 3:

a[3] = 6, a[2] = 4
a[3] - a[2] = 6 - 4 = 2
2 != -3, so we enter the else block:
d = 6 - 4 = 2 (update the difference)
curr = 2 (reset the length of the current arithmetic subarray)
Explanation:

The difference changed from -3 to 2, which means the previous arithmetic subarray [10, 7, 4] ends, and a new arithmetic subarray [4, 6] starts.
We reset curr to 2 because the new subarray starts with two elements.
j = 4:

a[4] = 8, a[3] = 6
a[4] - a[3] = 8 - 6 = 2
2 == 2, so curr++ (now curr = 3)
ans = max(3, 3) = 3
The current arithmetic subarray is now [6, 8], but ans remains 3.

j = 5:

a[5] = 10, a[4] = 8
a[5] - a[4] = 10 - 8 = 2
2 == 2, so curr++ (now curr = 4)
ans = max(3, 4) = 4
The current arithmetic subarray is now [6, 8, 10], and ans is updated to 4.

j = 6:

a[6] = 11, a[5] = 10
a[6] - a[5] = 11 - 10 = 1
1 != 2, so we enter the else block:
d = 11 - 10 = 1 (update the difference)
curr = 2 (reset the length of the current arithmetic subarray)
The current arithmetic subarray ends, and a new one starts with [10, 11], but ans remains 4.

Final Output:
The value of ans is 4, which is the length of the longest arithmetic subarray [4, 6, 8, 10].

Key Points:
The else part is crucial for resetting the tracking of the current arithmetic subarray when a change in the difference occurs.
It ensures that whenever the difference between consecutive elements changes, we start counting the length of a new arithmetic subarray, updating the difference d and resetting curr to 2.
The max(ans, curr) ensures that we always keep track of the longest arithmetic subarray encountered so far.

 */

int main()
{
    string num;
    cout << "Enter a number: ";
    cin >> num;

    string reversedNum = reverseNumberString(num);
    cout << "Reversed number: " << reversedNum << endl;

    // Lower Conversion
    char ch;
    cin >> ch;
    char lower_ch = ch + 32;
    cout << lower_ch << endl;

    vector<char> ja = {'H', 'e', 'l', 'l', 'o'};
    string s = "jatin";
    ReverseCharArray(ja);
    ReverseString(s);
    ReverseStringPalindrome("madam");

    string s1 = "abc";
    string s2 = "acb";
    cout << (isAnagram(s1, s2) ? "Yes" : "No") << endl;

    string s4 = "I am Jatin jhd jhbd";
    countWord(s4);

    cout << firstUniqChar("aas");

    char name[20];
    cout << "Enter the name: " << endl;
    cin >> name;

    cout << name << endl;
    getLength(name);
    // countWords("jatin sahil sa");

    vector<int> nums = {1, 2, 3, 4, 5};
    if (check(nums))
        cout << "The array is sorted." << endl;
    else
        cout << "The array is not sorted." << endl;

    vector<int> arr = {1, 8, 7, 56, 90};
    int n = arr.size();

    vector<int> arr = {1, 1, 1, 0, 1, 1};
    findMaxConsecutiveOnes(arr);

    vector<int> arr1 = {0, 1, 0, 3, 12};
    moveZeroes(arr1);

    vector<int> a = {1, 2, 2};
    SumSubArray(a);

    vector<int> b1 = {10, 7, 4, 6, 8, 10, 11};
    LongestArithmeticSubArray(b1);

    int result = largest(arr, n);
    cout << "The largest element is: " << result << endl;

    return 0;
}
